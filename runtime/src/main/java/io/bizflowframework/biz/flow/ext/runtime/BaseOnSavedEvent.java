package io.bizflowframework.biz.flow.ext.runtime;

import io.bizflowframework.biz.flow.ext.runtime.event.AggregateRootEventPayload;
import io.bizflowframework.biz.flow.ext.runtime.event.EventType;

public abstract class BaseOnSavedEvent<ID extends AggregateId, T extends AggregateRoot<ID, T>, P extends AggregateRootEventPayload<T>> {

    public abstract void execute(AggregateRootIdentifier<ID> aggregateRootIdentifier, AggregateVersion aggregateVersion, CreatedAt createdAt, P payload);

    public Class<T> aggregateRootClass() {
        throw new RuntimeException("Do not implement. Will be generated by extension :)");
    }

    public Class<P> aggregateRootEventPayloadClass() {
        throw new RuntimeException("Do not implement. Will be generated by extension :)");
    }

    public final AggregateType aggregateType() {
        return new AggregateType(aggregateRootClass());
    }

    public final EventType eventType() {
        return new EventType(aggregateRootEventPayloadClass());
    }
}
